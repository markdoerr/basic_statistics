\documentclass[a4paper,10pt]{book}
\usepackage[utf8]{inputenc}
\usepackage{graphicx, subfig}

\title{Basic Statistics for Scientists in R and python}
\date{\today}
\author{mark doerr \\ institute for biochemistry \\ university greifswald, germany}

\begin{document}
\maketitle
\setkeys{Gin}{width=width=0.8\textwidth}

\chapter{Using R Studio}

\section{Windows in R Studio}

\begin{itemize}
 \item Text Editor window 
 \item Console
 \item Environment window
 \item Help and Plots Window
\end{itemize}

\section{Getting help}

Help/documentation viewer

Hitting F1 on a function shows help.

\chapter{Basic Data Types in R}

\section{vectors and strings}

<<in-build data sets - vector, eval=TRUE, dev='png', echo=TRUE>>=

x = 1

x
x[1]

y = c(1:10) # vector

y
y[2]

y + 5
y * 3.0

y + rnorm(10)

a_string = "hello world" # string

a_string


@


\subsection{matrix}

<<in-build data sets - maxtrix, eval=TRUE, dev='png', echo=TRUE>>=

a_mtr = matrix(y, nrow=2) 

a_mtr

@

\subsection{list}

<<in-build data sets - list, eval=TRUE, dev='png', echo=TRUE>>=

a_lst = list("A", 1)

a_lst

@


\subsection{data frame}

<<in-build data sets - data frame 1, eval=TRUE, dev='png', echo=TRUE>>=

x = (1:10)
my_first_data_frame_df = data.frame("x"=x, "y"=x*0.1 )

my_first_data_frame_df

@

This shows how to access the data of the data frame

<<in-build data sets - data frame access, eval=TRUE, dev='png', echo=TRUE>>=

my_first_data_frame_df[,1] # first column

my_first_data_frame_df$x  # first column by name

my_first_data_frame_df[1,] # first line

my_first_data_frame_df[2,2] # second element of second line

@



<<in-build data sets - data frame 2, eval=TRUE, dev='png', echo=TRUE>>=

x <- c(1:10)
w <- 20 + 10*x
w


linear_sample_df <- data.frame(x=x, y=w + rnorm(10)*10)

plot(linear_sample_df)

linear_model_lm <- lm(y ~ x, data=linear_sample_df)
summary(linear_model_lm)
abline(linear_model_lm, col="red")

@


\subsection{Examples of in-build data sets for testing}

<<in-build data sets, eval=TRUE, dev='png', echo=TRUE>>=

library(help = "datasets")

@

\subsubsection{Iris}

<<in-build data sets - iris, eval=TRUE, dev='png', echo=TRUE>>=

head(iris)

head(iris3)

@

\subsubsection*{women}

<<in-build data sets - women, eval=TRUE, dev='png', echo=FALSE>>=

head(women)

@

\subsubsection*{ELISA - DNAse}

<<in-build data sets - DNAse, eval=TRUE, dev='png', echo=FALSE>>=

head(DNase)
@


\section*{Mean, Average, Summary}

<<mean_example, eval=TRUE, dev='png', echo=FALSE>>=
wts = c(0, 0, 0, 1, 1, 0, 0, 0, 0, 0)
bdln = c(0, 0, 0, 0, 0, 1, 0, 0, 0, 2)
wtcsf = c(61, 59, 55, 64, 57, 69, 63, 51 ,61 ,61)
bdlncsf = c(48, 34, 50, 59, 37, 46, 44, 39, 51, 47)

mean(wtcsf)
sd(wtcsf)
summary(wtcsf)

wtcsf[1:3]

t.test(wtcsf[1:4])
t.test(wtcsf)


mean(bdlncsf)
sd(bdlncsf)
summary(bdlncsf)

@

\section*{Reading/Writing Data from a File}

<<reading_writing, eval=TRUE, dev='png', echo=TRUE>>=

setwd(".")

input_df = read.csv("demo_data.csv")

input_df

@

\section*{Basic Plotting in R}

<<basic_plotting, eval=TRUE, dev='png', echo=TRUE>>=

x <- rnorm(10); 

plot(x)
plot(x, type="l", col="red", main="Line Diagramm", xlab="time [year]", ylab="difference/year")

n=10
x <- c(0:n)
y <- sin(x)

x
y
plot(x, y)
plot(x, y, type="l")

x <- rnorm(10); y <- rnorm(10)
plot(x,y)

x <- 1:10
w <- 20 + 10*x
w

linear_sample_df <- data.frame(x=x, y=w + rnorm(10)*10)

plot(linear_sample_df)

linear_model_lm <- lm(y ~ x, data=linear_sample_df)
summary(linear_model_lm)
abline(linear_model_lm, col="red")


@


\section*{Variance Tests}

<<variance_tests, eval=TRUE, dev='png', echo=FALSE>>=

x <- rnorm(10); y <- rnorm(10)

@

\section{Standard error of mean}

$$ std_{err} = \frac{\sigma}{\sqrt{n}} $$

<<std error of mean, eval=TRUE, dev='png', echo=FALSE>>=

stderr <- function(x) sqrt(var(x)/length(x))

@

\section*{Significance Tests}

<<significance_tests, eval=TRUE, dev='png', echo=FALSE>>=

stderr <- function(x) sqrt(var(x)/length(x))

slopes1_vec = vector()
slopes2_vec = vector()

n = 10

x <- c(1:n)

w1 <- 5*x + 2 
w2 <- 5.5*x + 2 

curr_sd = 1

for (i in 1:n){
  linear_sample_df <- data.frame(x=x, y=w1 + rnorm(10, sd=curr_sd)*10)
  linear_model_lm <- lm(y ~ x, data=linear_sample_df)
  slopes1_vec = append(slopes1_vec, coef(linear_model_lm)["x"])
}

slopes1_vec

mean(slopes1_vec[1:3])
mean(slopes1_vec[3:5])

std_err1 = stderr(slopes1_vec) # standare error of mean

std_err1

2 * std_err1  

plot(slopes1_vec, ylim=c(0,10), col="green")

sl_mean1 = mean(slopes1_vec)

abline(h=sl_mean1,  lty=1,  col="green")

par(new = TRUE) # overlay a figure
 
for (i in 1:n){
  linear_sample_df <- data.frame(x=x, y=w2 + rnorm(10, sd=curr_sd)*10)
  linear_model_lm <- lm(y ~ x, data=linear_sample_df)
  slopes2_vec = append(slopes2_vec, coef(linear_model_lm)["x"])
}

plot(slopes2_vec, ylim=c(0,10), col="red")

sl_mean2 = mean(slopes2_vec)

abline(h=sl_mean2,  lty=1,  col="red")

slopes_vec = vector() # resetting slopes vector

t.test(slopes1_vec,slopes2_vec, conf.level = 0.95)

dev.off() # stop printing


n = 1000
for (i in 1:n){
  linear_sample_df <- data.frame(x=x, y=w + rnorm(10)*10)
  linear_model_lm <- lm(y ~ x, data=linear_sample_df)
  slopes_vec = append(slopes_vec, coef(linear_model_lm)["x"])
}

slopes_vec

mean(slopes_vec)

mean(slopes_vec[1:3])
mean(slopes_vec[3:5])

mean(slopes_vec[1:30])
mean(slopes_vec[30:50])

mean(slopes_vec[1:300])
mean(slopes_vec[300:500])

@


\section*{Distributions}

<<distributions, eval=TRUE, dev='png', echo=FALSE>>=

x <- rnorm(10); y <- rnorm(10)

@


\subsection*{Normal Distribution}

Normal Distribution 

Based on the equation $$ f(x) = e^{-\frac{(x-\mu)^2}{2\sigma^2}} $$

$\mu = $ mean
$\sigma = $ standard deviation

with $ mean = 1 $, $ \sigma = 0.1 $

\begin{figure}
\begin{center}
<<normal_distribution_example1, eval=TRUE, dev='pdf', echo=FALSE, fig.height=4, fig.width=6, dpi=600>>=

#fig.height=4, fig.width=6 

mean=1; sd=0.1
lb=0.95; ub=1.05

x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)

plot(x, hx, type="n", xlab="value", ylab="",
  main="", axes=FALSE)

i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")

area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
result <- paste("P(",lb,"< IQ <",ub,") =",
   signif(area, digits=3))
mtext(result,3)
axis(1, at=seq(0.4, 1.6, 0.2), pos=0) 

@
\caption{Normal Distribution.}
\end{center}
\end{figure}

\subsubsection*{Example of a Normal Distribution}

Children's IQ scores are normally distributed with a
mean of 100 and a standard deviation of 15. What
proportion of children are expected to have an IQ between
80 and 120?

<<normal_distribution, eval=TRUE, dev='png', echo=FALSE, fig.height=4, fig.width=6, dpi=600>>=
mean=100; sd=15
lb=80; ub=120

x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)

plot(x, hx, type="n", xlab="IQ Values", ylab="",
  main="Normal Distribution of IQ Values", axes=FALSE)

i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")

area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
result <- paste("P(",lb,"< IQ <",ub,") =",
   signif(area, digits=3))
mtext(result,3)
axis(1, at=seq(40, 160, 20), pos=0) 
@


Cusum Example 

<<cumsum_example, eval=TRUE, dev='png', echo=FALSE>>=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = 'l')  # Brownian motion
@

\subsection*{Student Distribution}

Display the Student's t distributions with various
degrees of freedom and compare to the normal distribution

<<student_distribution, eval=TRUE, dev='png', echo=FALSE>>=
x <- seq(-4, 4, length=100)
hx <- dnorm(x)

degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")

plot(x, hx, type="l", lty=2, xlab="x value",
  ylab="Density", main="Comparison of t Distributions")

for (i in 1:4){
  lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}

legend("topright", inset=.05, title="Distributions",
  labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
@

\section{Integration}

<<integration, eval=TRUE, dev='png', echo=TRUE>>=

int_func <- function(x) {
  y = sin(x) ** 2 
  return(y)
}

integrate(int_func, lower=1 , upper=4)

@


\end{document}